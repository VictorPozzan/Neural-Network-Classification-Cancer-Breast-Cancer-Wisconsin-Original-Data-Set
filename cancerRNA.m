% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 21-Nov-2019 21:23:23
%
% This script assumes these variables are defined:
%
%   instancias - input data.
%   classes01 - target data.

%x = instancias';
%t = classes01';

x = importdata('instancias.csv')';
t = importdata('classes01.csv')';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
i = [1,2];

hiddenLayerSize = [7 7];

net = patternnet(hiddenLayerSize, trainFcn);
net.layers{1}.topologyFcn = 'tritop';
net.layers{2}.topologyFcn = 'tritop';
net.layers{i}.dimensions = [7 1];
plotsom(net.layers{i}.positions)

net.layers{1}.transferFcn = 'satlins';
net.layers{2}.transferFcn = 'purelin';

%net.layers{1}.transferFcn = 'tansig';
%net.layers{2}.transferFcn = 'logsig';


%net.layers{2}.transferFcn = 'tansig';
%net.layers{2}.transferFcn = 'compet';
%net.layers{2}.transferFcn = 'elliotsig';
%net.layers{2}.transferFcn = 'hardlim';
%net.layers{2}.transferFcn = 'hardlims';
%net.layers{2}.transferFcn = 'logsig';
%net.layers{2}.transferFcn = 'netinv';
%net.layers{2}.transferFcn = 'poslin';
%net.layers{2}.transferFcn = 'purelin';
%net.layers{2}.transferFcn = 'radbas';
%net.layers{2}.transferFcn = 'radbasn';
%net.layers{2}.transferFcn = 'satlin';
%net.layers{2}.transferFcn = 'satlins';
%net.layers{2}.transferFcn = 'softmax';
%net.layers{2}.transferFcn = 'tribas';
    
    
%net.layers{2}.transferFcn = 'sinsig';

net.efficiency.memoryReduction;

net.trainParam.max_fail = 7;

% Setup Division of Data for Training, Validation, Testing

%net.divideParam.trainRatio = 70/100;
%net.divideParam.valRatio = 15/100;
%net.divideParam.testRatio = 15/100;

%[trainInd,valInd,testInd] = divideblock(683,0.8,0.1,0.1)
[trainInd,valInd,testInd] = divideint(683,0.7,0.15,0.15)
%[trainInd,valInd,testInd] = divideind(683,1:478,479:580, 581:683);


net.trainParam.epochs = 1000;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

